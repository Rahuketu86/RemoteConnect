# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_cli.ipynb (unless otherwise specified).

__all__ = ['app_logger', 'start_code', 'start_jupyter', 'start_pluto', 'fsize']

# Cell
from fastcore.script import call_parse, Param, bool_arg
from fastcore.basics import in_colab
from .core import RemoteCode, RemoteJupyter, RemotePluto, mount_drive, connect_to_ngrok
import math
import pandas as pd
import logging
import pathlib

# Cell
app_logger = logging.getLogger('cli'); app_logger

# Cell
@call_parse
def start_code(port:Param("Port to Start Code", type=int)=10000,
               password:Param("Password to Start Code", type=str)=None,
               tunnel:Param("Tunel Type", type=str)='ngrok',
               authtoken:Param("Tunnel Authtoken for ngrok", type=str)=None):
    "Starts Code Server"
    if in_colab(): mount_drive()
    remote = RemoteCode(password=password, port=port, tunnel=tunnel, authtoken=authtoken)
    remote.launch()

# Cell
@call_parse
def start_jupyter(port:Param("Port to Start Jupyter", type=int)=9000,
                  ui:Param("Interface to start", type=str)='notebook',
                  tunnel:Param("Tunel Type", type=str)='ngrok',
                  authtoken:Param("Tunnel Authtoken for ngrok", type=str)=None,
                  subdomain:Param("Add a subdomain only for localtunnel", type=str)=None,
                  install_code:Param("Flag to install code", type=bool)=False,
                  install_julia:Param("Flag to install code", type=bool)=False,
                  ):
    "Starts Jupyter"
    if in_colab():
        print("Mounting Drive")
        mount_drive()
    remote = RemoteJupyter(port=port,
                           ui=ui,
                           tunnel=tunnel,
                           authtoken=authtoken,
                           subdomain=subdomain,
                           install_code=install_code,
                           install_julia=install_julia
                          )
    remote.launch()

# Cell
@call_parse
def start_pluto(port:Param("Port to Start Jupyter", type=int)=9000,
                tunnel:Param("Tunel Type", type=str)='ngrok',
                authtoken:Param("Tunnel Authtoken for ngrok", type=str)=None):
    "Starts Pluto.jl reactive notebook"
    if in_colab(): mount_drive()
    remote = RemotePluto(port=port, tunnel=tunnel, authtoken=authtoken)
    remote.launch()

# Cell
def _convert_size(size_bytes):
    if size_bytes == 0:
        return "0B"
    size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return "%s %s" % (s, size_name[i])

# Cell
@call_parse
def fsize(fldr:Param("Pathstring of folder to measure size")="."):
    path = pathlib.Path(fldr).resolve()
    app_logger.info(f"Current folder: {path}")

    with pd.option_context('display.max_rows', None,
                           'display.max_columns', None,
                           'display.width', 10000,
                           'display.precision', 3,
                           'display.colheader_justify', 'left'):
        df = pd.DataFrame([{"Name":p.name, "Size":_convert_size(p.stat().st_size), "Bytes":p.stat().st_size} for p in path.ls()])
        app_logger.info(f"Current foldersize: {_convert_size(df['Bytes'].sum())}")
        print(df.sort_values(by='Bytes').drop('Bytes', axis=1).reset_index(drop=True))